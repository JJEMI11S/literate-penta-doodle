#  find questions at http://openbookproject.net/thinkcs/python/english3e/classes_and_objects_I.html
# exercise 15
# rewrite the function distance so it takes 2 points as parameters


def Question_15_1():
    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y


    p = Point(3, 4)
    q = Point(6, 8)


    def distance(p1, p2):
        x1 = p1.x
        x2 = p2.x
        y1 = p1.y
        y2 = p2.y
        x_diff = x2 - x1
        y_diff = y2 - y1
        dist = ((x_diff**2) + (y_diff**2) )**0.5
        return dist

    print(distance(p, q))


def Question_15_2():
    '''
    add method reflect_x which returns a new point in the reflection of the x axis
    :return:
    '''
    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

        def reflect_x(self):
            y = -1 * self.y
            return (self.x, y)

    p = Point(3,4).reflect_x()
    print(p)


def Question_15_3():
    '''
    add a method returning the gradient of the line joining the point and the origin
    :return:
    '''
    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

        def slope_from_origin(self):
            gradient = self.y / self.x
            return gradient

    p = Point(1, 5).slope_from_origin()
    print(p)


def Question_15_4():
    '''
    add a method that finds the equation of the straight line between the
    original points and another point that is given
    :return:
    '''

    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

        def get_line_to(self, pe):
            m = (int(self.y) - pe.y) / int((self.x - pe.x))
            c = (int(self.y) - (m * int(self.x)))
            return m, c

    p = Point(1, 5).get_line_to(Point(2,10))
    print(p)

# exercise 16


def Question_16_1():
    '''
    Add a method area to the Rectangle class that returns the area of any instance:
    :return:
    '''
    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

    class Rectangle:

        def __init__(self, posn, w, h):
            """ Initialize rectangle at posn, with width w, height h """
            self.corner = posn
            self.width = w
            self.height = h

        def __str__(self):
            return "({0}, {1}, {2})".format(self.corner, self.width, self.height)

        def area(self):
            A = self.width * self.height
            return A


    r = Rectangle(Point(0, 0), 10, 5)
    print(r.area())


def Question_16_2():
    '''
    Write a perimeter method in the Rectangle class
    so that we can find the perimeter of any rectangle instance
    :return:
    '''
    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

    class Rectangle:

        def __init__(self, posn, w, h):
            """ Initialize rectangle at posn, with width w, height h """
            self.corner = posn
            self.width = w
            self.height = h

        def __str__(self):
            return "({0}, {1}, {2})".format(self.corner, self.width, self.height)

        def perimeter(self):
            return (2 * self.width) + (2 * self.height)

    r = Rectangle(Point(0, 0), 10, 5)
    print(r.perimeter())


def Question_16_3():
    '''
    Write a flip method in the Rectangle class that
    swaps the width and the height of any rectangle instance
    :return:
    '''

    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

    class Rectangle:

        def __init__(self, posn, w, h):
            """ Initialize rectangle at posn, with width w, height h """
            self.corner = posn
            self.width = w
            self.height = h

        def __str__(self):
            return "({0}, {1}, {2})".format(self.corner, self.width, self.height)

        def flip(self):
            hold = self.width
            self.width = self.height
            self.height = hold

    r = Rectangle(Point(0, 0), 10, 5)
    print(r.height)
    r.flip()
    print(r.height)


def Question_16_4():
    class Point:

        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

    class Rectangle:

        def __init__(self, posn, w, h):
            """ Initialize rectangle at posn, with width w, height h """
            self.corner = posn
            self.width = w
            self.height = h

        def __str__(self):
            return "({0}, {1}, {2})".format(self.corner, self.width, self.height)

        def contain(self, pstn):
            if pstn.x <= (self.width + self.corner.x):
                if pstn.x >= self.corner.x:
                    if pstn.y <= self.height + self.corner.y:
                        if pstn.y >= self.corner.y:
                            return True
            return False
    r = Rectangle(Point(0, 0), 10, 5)
    print(r.contain(Point(3, 7)))


# Chapter 18

import turtle



def Question_18_1():
    '''
    Modify the Koch fractal program so that it draws a Koch snowflake
    :return:
    '''
    def koch(t, order, size):
        if order == 0:          # The base case is just a straight line
            t.forward(size)
        else:
            koch(t, order-1, size/3)   # Go 1/3 of the way
            t.left(60)
            koch(t, order-1, size/3)
            t.right(120)
            koch(t, order-1, size/3)
            t.left(60)
            koch(t, order-1, size/3)

    def koch_snowflake():
        for i in range(0, 3):
            koch(t, 2, 200)
            t.right(120)

    canvas = turtle.Screen()
    canvas.setup(600, 600)
    t = turtle.Turtle()
    t.penup()
    t.pendown()
    koch_snowflake()


def Question_18_2_a():
    '''
    Draw a Cesaro torn line fractal, of the order given by the user.
     We show four different lines of orders 0,1,2,3.
      In this example
    :return:
    '''
    def Cesaro(t, order, size):
        if order == 0:          # The base case is just a straight line
            t.forward(size)
        else:
            Cesaro(t, order-1, size/2)   # Go 1/3 of the way
            t.left(80)
            Cesaro(t, order-1, size/2)
            t.right(160)
            Cesaro(t, order-1, size/2)
            t.left(80)
            Cesaro(t, order-1, size/2)
    canvas = turtle.Screen()
    canvas.setup(600, 600)
    t = turtle.Turtle()
    Cesaro(t, 3, 200)

def Question_18_2_b():


    def Cesaro(t, order, size):
        if order == 0:          # The base case is just a straight line
            t.forward(size)
        else:
            Cesaro(t, order-1, size/3)   # Go 1/3 of the way
            t.left(85)
            Cesaro(t, order-1, size/3)
            t.right(170)
            Cesaro(t, order-1, size/3)
            t.left(85)
            Cesaro(t, order-1, size/3)


    def Cesaro_squares():
        v = t.clone()
        for i in range(0, 4):
            Cesaro(t, 3, 200)
            Cesaro(v, 1, 200)
            v.left(90)
            t.left(90)

    canvas = turtle.Screen()
    canvas.setup(600, 600)
    t = turtle.Turtle()
    t.speed(10)
    Cesaro_squares()

def Question_18_3_and_4():
    '''
    A Sierpinski triangle of order 0 is an equilateral triangle.
    An order 1 triangle can be drawn by drawing 3 smaller triangles
    (shown slightly disconnected here, just to help our understanding).
    Higher order 2 and 3 triangles are also shown.
    Draw Sierpinski triangles of any order input by the user

    Adapt the above program to change the color of its three sub-triangles at some depth of recursion
    :return:
    '''
    counter = -1
    list = ["blue", "purple", 'green']

    def colour(t, order):
        if order == 2:
            if t.pencolor() == "purple":
                return "blue"
            if t.pencolor() == "blue":
                return "green"
            if t.pencolor() == "green":
                return "purple"
        else:
            return t.pencolor()

    def tri(t, size):
        t.right(120)
        t.forward(size)
        t.right(120)
        t.forward(size)
        t.right(120)
        t.forward(size)

    def triangle(t, order, size, depth):

        t.color(colour(t, order))

        if order == 0:          # The base case is just a straight line
            tri(t, size)
        else:
            triangle(t, order-1, size/2)   # Go 1/3 of the way
            t.right(120)
            t.forward(size)
            triangle(t, order-1, size/2)
            t.right(120)
            t.forward(size)
            triangle(t, order-1, size/2)
            t.right(120)
            t.forward(size)

    t = turtle.Turtle()
    t.color("purple")
    t.right(180)
    t.speed(10)
    canvas = turtle.Screen()
    canvas.setup(500, 500)
    triangle(t, 4, 200,)


def Question_18_5():
    '''

    :return:
    '''
    def recursive_min(num):
        best = 10000
        for i in num:
            try:
                i = int(i)
                if i < best:
                    best = i
            except TypeError:
                value = recursive_min(i)
                if value < best:
                    best = value
        return best
    print(recursive_min([2, 9, [0, [-1], 13], 8, 6]))


def Question_18_6():
    '''
    Write a function count that returns the number of occurrences of target in a nested list
    :return:
    '''
    def count(a, list):
        counter = 0
        for i in list:
            try:
                i = int(i)
                if i == a:
                    counter += 1
            except TypeError:
                value = count(a, i)
                counter += value
        return counter
    print(count(2, [2, 9, [2, 1, 13, 2], 8, [2, 6]]))

def Question_18_7():
    '''
    Write a function flatten that returns a simple list containing all the values in a nested list
    :return:
    '''
    def flatten(list):
        new = []
        for i in list:
            try:
                i = int(i)
                new.append(i)
            except TypeError:
                sub = flatten(i)
                for j in sub:
                    new.append(j)
        return new
    print(flatten([2, 9, [2, 1, 13, 2], 8, [2, 6]]))

def Question_18_8():
    '''
    Rewrite the fibonacci algorithm without using recursion. Can you find bigger terms of the sequence
    :return:
    '''
    def fake_fibonacci(num):
        fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]
        try:
            return fib[num]
        except IndexError:
            print("I don't know")


def Question_19_1():
    '''
    Write a function named readposint that uses the input dialog
     to prompt the user for a positive integer and then checks
     the input to confirm that it meets the requirements.
     It should be able to handle inputs that cannot be
     converted to int, as well as negative ints, and edge cases
     (e.g. when the user closes the dialog, or does not enter anything at all.)

    :return:
    '''
    import time
    def readposint():
        value = input(print("hello please input a positive int"))
        try:
            if value == int(value) and value >= 0 and value != "":
                print("well done")
            else:
                print("tsk tsk tsk")
        except TypeError:
            print("YOu TRAITOR THAT IS NOT A VALID VALUE")

def Question_20_1():
    '''
    Write a program that reads a string and
    returns a table of the letters of the
    alphabet in alphabetical order which
    occur in the string together with
    the number of times each letter occurs.
    Case should be ignored.
    :return:
    '''
    def letter_count(string):
        letters = {}
        for i in string:
            i = i.lower()
            if i != " ":
                if i in letters:
                    letters[i] += 1
                else:
                    letters[i] = 1
        for i in letters:
            print(i,":",letters[i])

    letter_count("ThiS is String with Upper and lower case Letters")


def Question_20_3():
    '''
    Write a program called alice_words.py that creates a
    text file named alice_words.txt containing an alphabetical
    listing of all the words, and the number of times each occurs,
    in the text version of Alice’s Adventures in Wonderland.
    :return:
    '''
    import re
    punctuation = [",", ".", "!", "?"]
    alice = open("Alice.txt")
    write_up = open("alice_words.txt", "w")
    text = alice.readlines()
    broken = []
    best = 0
    best_word = ""
    for j in text:
        j = j[:-1]
        for k in j.split(" "):
            k = re.sub('[^\w\s]',"",k)
            if len(k) > best:
                best_word = k
                best = len(k)
            broken.append(k)

    print(broken)
    words = {}
    for i in broken:
        if i not in words:
            words[i] = 1
        else:
            words[i] += 1
    write_up.write("word          Count \n")
    write_up.write("==================== ")
    for i in words:
        write_up.write("{0:20}{1} \n".format(i, words[i]))

    print(best_word)

def Question_21_1_and_2():
    '''
    Write a method in the MyTime class between that takes
    two MyTime objects, t1 and t2, as arguments, and returns
    True if the invoking object falls between the two times
    '''
    class MyTime:

        def __init__(self, hrs=0, mins=0, secs=0):
            totalsecs = hrs*3600 + mins*60 + secs
            self.hours = totalsecs // 3600
            leftoversecs = totalsecs % 3600
            self.minutes = leftoversecs // 60
            self.seconds = leftoversecs % 60

        def between(self, t1, t2):
            totalsecs = self.hours*3600 + self.minutes*60 + self.seconds
            time_1 = t1.hours*3600 + t1.minutes*60 + t1.seconds
            time_2 = t2.hours*3600 + t2.minutes*60 + t2.seconds
            if totalsecs >= time_1:
                if totalsecs < time_2:
                    return True
            return False

    time = MyTime(1, 2, 3)
    t1 = MyTime(1, 0, 0)
    t2 = MyTime(2, 0, 0)
    print(time.between(t1, t2))


def Question_21_3():
    '''
    Overload the necessary operator(s) so that you can write
    if t1 > t2:
    '''
    class MyTime:

        def __init__(self, hrs=0, mins=0, secs=0):
            totalsecs = hrs*3600 + mins*60 + secs
            self.hours = totalsecs // 3600
            leftoversecs = totalsecs % 3600
            self.minutes = leftoversecs // 60
            self.seconds = leftoversecs % 60

        def __gt__(self, time2):
            if self.hours > time2.hours:
                return True
            if self.hours < time2.hours:
                return False

            if self.minutes > time2.minutes:
                return True
            if self.minutes < time2.minutes:
                return False
            if self.seconds > time2.seconds:
                return True

            return False

    time = MyTime(1, 2, 3)
    t1 = MyTime(2, 3, 4)
    print(time < t1)

def Question_21_4_5():
    '''
    Create some test cases for the increment method.
    Consider specifically the case where the number
    of seconds to add to the time is negative.
    Fix up increment so that it handles this case if it does not do so already.
    '''
    class MyTime:

        def __init__(self, hrs=0, mins=0, secs=0):
            totalsecs = hrs*3600 + mins*60 + secs
            self.hours = totalsecs // 3600
            leftoversecs = totalsecs % 3600
            self.minutes = leftoversecs // 60
            self.seconds = leftoversecs % 60

        def increment(t, secs):
            totalsecs = t.hours*3600 + t.minutes*60 + t.seconds
            totalsecs += secs
            t.hours = totalsecs // 3600
            leftoversecs = totalsecs % 3600
            t.minutes = leftoversecs // 60
            t.seconds = leftoversecs % 60
    t1 = MyTime(0, 1, 2)
    t1.increment(5)
    print(t1.seconds)
    t1.increment(60)
    print(t1.minutes)
    t1.increment(3600)
    print(t1.hours)
    t1.increment(-8)
    print(t1.hours, t1.minutes, t1.seconds)


def Question_23_1():
    '''
    Add a method, print_hands, to the OldMaidGame class which traverses
    self.hands and prints each hand.
    '''
    class OldMaidHand(Hand):
        def remove_matches(self):
            count = 0
            original_cards = self.cards[:]
            for card in original_cards:
                match = Card(3 - card.suit, card.rank)
                if match in self.cards:
                    self.cards.remove(card)
                    self.cards.remove(match)
                    print("Hand {0}: {1} matches {2}".format(self.name, card, match))
                    count += 1
            return count

        def print_hands(self):
            for name in self.hands:
                print(name)

        def play(self, names):
            # Remove Queen of Clubs
            self.deck.remove(Card(0,12))

            # Make a hand for each player
            self.hands = []
            for name in names:
                self.hands.append(OldMaidHand(name))

            # Deal the cards
            self.deck.deal(self.hands)
            print("---------- Cards have been dealt")
            self.print_hands()

            # Remove initial matches
            matches = self.remove_all_matches()
            print("---------- Matches discarded, play begins")
            self.print_hands()

            # Play until all 50 cards are matched
            turn = 0
            num_hands = len(self.hands)
            while matches < 25:
                matches += self.play_one_turn(turn)
                turn = (turn + 1) % num_hands

            print("---------- Game is Over")
            self.print_hands()


def Question_23_2():
    '''
    Define a new kind of Turtle, TurtleGTX, that comes with some extra features:
    it can jump forward a given distance, and it has an odometer that keeps track
    of how far the turtle has travelled since it came off the production line.
    '''
    import turtle
    import random
    from turtle import Turtle

    class TurtleGTX(Turtle):

        def __init__(self, initial_distance=0):
            super().__init__()
            self.distance = initial_distance
            self.tyres = 0
            self.broke = False

        def forward(self, distance):
            try:
                if self.tyres > random.randrange(50, 100) or self.broke is True:
                    self.broke = True
                    raise Exception("Tyre Broke Down")
                if distance < 0:
                    distance = distance * -1
                self.tyres += distance
                self.distance += distance
            except Exception:
                print("call the change_tyres method to fix")

        def change_tyres(self):
            self.tyres = 0
            self.broke = False

        def odometer(self):
            print(self.distance)

    pig = TurtleGTX()
    pig.forward(100)
    pig.forward(10)
    pig.change_tyres()
    pig.forward(10)

def Question_24():
    '''
    By convention, lists are often printed in brackets with commas between the elements, as in [1, 2, 3].
    Modify print_list so that it generates output in this format.
    '''
    class Node:
        def __init__(self, cargo=None, next=None):
            self.cargo = cargo
            self.next = next

        def __str__(self):
            return str(self.cargo)

    def print_list(node):
        nodes = []
        while node is not None:
            nodes.append(node.cargo)
            node = node.next
        print(nodes)

    node1 = Node(1)
    node2 = Node(2)
    node3 = Node(3)
    node1.next = node2
    node2.next = node3
    print_list(node1)


def Question_25_1():
    print("Apply the postfix algorithm to the expression 1 2 + 3 *")
    import re

    def postfix(expression):
        sep = re.split("([^0-9])", str(expression))
        return sep

    def refine(expression):
        items = []
        seperated = postfix(expression)
        for i in seperated:
            if i == "" or i == " ":
                continue
            elif i == "+":
                depth = len(items)
                new = int(items[depth-1]) + int(items[depth-2])
                items.pop()
                items.pop()
                items.append(new)
            elif i == "-":
                depth = len(items)
                new = int(items[depth-1]) - int(items[depth-2])
                items.pop()
                items.pop()
                items.append(new)
            elif i == "*":
                depth = len(items)
                new = int(items[depth-1]) * int(items[depth-2])
                items.pop()
                items.pop()
                items.append(new)
            elif i == "/":
                depth = len(items)
                new = int(items[depth-1]) / int(items[depth-2])
                items.pop()
                items.pop()
                items.append(new)
            else:
                items.append(i)
        print(items)
    refine("1 2 + 3 *")
